@model TakagiSugeno.Model.ViewModels.RuleGeneralVM
@inject TakagiSugeno.Model.Services.RulesService rulesService;
@using TakagiSugeno.Model;
@{
    ViewBag.Title = "Reguły";
    var names = rulesService.GetSystemInputsOutputsNames(ViewBag.SystemId);
    ViewBag.VariablesList = Model.VariablesLists;
    ViewBag.ChartsData = Model.ChartsData;
}


<div class="row">
    <div class="col-sm-8">
        <h2 class="header">
            Reguły
        </h2>
    </div>
    <div class="col-sm-4">
        <div class="pull-right">
            <button class="btn btn-success" id="btnAdd" style="margin-top:20px;"><span class="glyphicon glyphicon-plus"></span> Dodaj</button>
            <button class="btn btn-primary" id="btnSave" style="margin-top:20px;" disabled><span class="glyphicon glyphicon-save"></span> Zapisz</button>
            <button class="btn btn-danger" id="btnCancel" style="margin-top:20px;" disabled data-toggle="modal" data-target="#cancelModal"><span class="glyphicon glyphicon-bullhorn"></span> Anuluj</button>
        </div>

    </div>
</div>
<div class="alert" id="alert-container" hidden>
    <span class="glyphicon glyphicon-remove hide-alert pull-right" onclick="hideAlert()"></span>
    <text id="alert-message"></text>
</div>
<div class="outer-container">
    <div class="inner-container">
        <div class="table-header">
            <table class="table rules-table" id="headertable">
                <thead>
                    <tr>
                        <th class="header-cell remove-col"></th>
                        <th class="header-cell id-col"></th>
                        @foreach (string name in names)
                        {
                            <th class="header-cell variable-col">@name is</th>
                            if (names.IndexOf(name) != names.Count - 1)
                            {
                                <th class="header-cell operation-col"></th>
                            }
                        }
                    </tr>
                </thead>
            </table>
        </div>
        <div class="table-body">
            <table id="bodytable" class="table rules-table">
                <tbody>
                    @foreach (var rule in Model.Rules)
                    {
                        Html.RenderPartial("RuleRow", rule);
                    }
                </tbody>
            </table>
        </div>
   </div>
</div>
<div id="temp" style="background-color:red;" hidden>
</div>
<div id="cancelModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Porzucenie zmian.</h4>
            </div>
            <div class="modal-body">
                <p>Czy na pewno chcesz porzucić wszystkie zmiany w regułach?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" onclick="cancelChanges()" data-dismiss="modal">Tak</button>
                <button type="button" class="btn btn-warning" data-dismiss="modal">Nie</button>
            </div>
        </div>

    </div>
</div>
<script type="text/javascript">

    var leftMargin = $(".body-content").offset().left;
    var leftPadding = $(".body-content").css("padding-left").replace("px", "");

    $(document).ready(function () {
        numerateRulesRows();
        refreshCheckboxes();

        var containers = $(".chart-container");
        $.each(containers, function (index, value) {
            var chart = new CanvasJS.Chart("temp", {
                data: [],
            });

            $(value).find(".json-data").each(function () {
                createChartFromJSONData(chart, $(this));
            })
            $(value).CanvasJSChart(chart.options);
            var id = $(this).parents(".panel").find(".variable-select").val();
            selectVariableOnChart(id, $(value).CanvasJSChart());
        })

        $(".collapse-panel .panel-body").hide();
    });

    $(".rules-table").on("click", ".collapse-button", function () {
        var $this = $(this);
        if ($this.hasClass('glyphicon-chevron-down')) {
            $this.parents('tr').find('.panel-body').slideDown(function () {
                $this.parents('tr').find('.chart-container').each(function (i, v) {
                    var id = $(v).parents(".panel").find("select").val();
                    selectVariableOnChart(id, $(v).CanvasJSChart());
                })
            });
            $this.removeClass('glyphicon-chevron-down').addClass('glyphicon-chevron-up');
        } else {
            $this.parents('tr').find('.panel-body').slideUp();
            $this.removeClass('glyphicon-chevron-up').addClass('glyphicon-chevron-down');
        }
        return false;
    });

    $(".rules-table").on("change", ".variable-select", function () {
        var id = $(this).val();
        if (id == -1) {
            $(this).parents(".panel").find("input[type=checkbox]").prop("disabled", true);
            $(this).parents(".panel").find("input[type=checkbox]").prop("checked", false);
        } else {
            $(this).parents(".panel").find("input[type=checkbox]").prop("disabled", false);
        }
        var container = $(this).parents(".panel").find(".chart-container");
        if ($(this).parents("tr").find(".collapse-button").hasClass('glyphicon-chevron-up')) {
            selectVariableOnChart(id, $(container).CanvasJSChart());
        }
    });

    $(".rules-table").on("change", "select, input[type=checkbox]", function () {
        changeRulesButtonsState(false);
    });

    $(".rules-table").on("click", ".remove-rule", function () {
        $(this).closest("tr").remove();
        changeRulesButtonsState(false);
        numerateRulesRows();
    });

    function cancelChanges() {
        setTimeout(function () {
            var id = $("tbody tr").first().attr("data-systemId");
            var url = "/Rules/SystemRules/?systemId=" + id;
            $.ajax({
                url: url,
                type: "GET",
                success: function (response) {
                    $(".body-content").html(response);                   
                }
            });
        }, 200)
    }

    $("#btnAdd").click(function () {
        var id = $("#SysId").attr("data-system-id");
        var ruleId = createFakeRuleId();
        var url = "/Rules/NewRule/?systemId=" + id + "&ruleId=" + ruleId;
        $.ajax({
            url: url,
            type: "GET",
            success: function (response) {              
                $(".rules-table tbody").append(response);
                numerateRulesRows();
                createChartForRuleRow($("tbody").find("#" + ruleId));
                $("#" + ruleId + " .chart-container").hide();
                changeRulesButtonsState(false);
                refreshCheckboxes();
                
            }
        });
    });

    $("#btnSave").click(function () {
        var rules = collectRulesData();
        $.ajax({
            url: "@Url.Action("Save")",
            type: "POST",
            data: JSON.stringify(rules),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                var id = $("#SysId").attr("data-system-id");
                RefreshRules(id);
        }
    });
    });

    function createChartForRuleRow(row) {
        var containers = $(row).find(".chart-container");
        $.each(containers, function (index, value) {
            var chart = new CanvasJS.Chart("temp", {
                data: [],
            });

            $(value).find(".json-data").each(function () {
                createChartFromJSONData(chart, $(this));
            })
            $(value).CanvasJSChart(chart.options);
            var id = $(this).parents(".panel").find(".variable-select").val();
            selectVariableOnChart(id, $(value).CanvasJSChart());
        })

    }

    $(".table-body").scroll(function () {
        
        $(".table-header").offset({ left: -1 * this.scrollLeft + leftMargin + parseInt(leftPadding) });
    });
</script>

