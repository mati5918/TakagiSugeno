@model TakagiSugeno.Model.ViewModels.OutputCalcVM
@using TakagiSugeno.Model
@inject TakagiSugeno.Model.Services.SystemStateHelper StateHelper
@{
    ViewBag.Title = "Obliczanie wyjść";
    bool isPublished = StateHelper.IsSystemPublished(ViewBag.SystemId);
}

<div class="row">
    <div class="col-sm-8">
        <h2 class="header">
            Obliczanie wyjść
        </h2>
    </div>
    <div class="col-sm-4">
        <div class="pull-right">
            <button class="btn btn-success" id="btnCalc" style="margin-top:20px;"><span class="glyphicon glyphicon-check"></span> Oblicz</button>
        </div>
    </div>
</div>
<hr />
<input asp-for="SystemId" class="form-control" id="SystemIdTemp" type="hidden" />
<div class="row">
    <form class="form-inline">
    <div class="col-sm-4">
        <label class="control-label">T-norma:&nbsp;&nbsp;</label>
        <select asp-for="AndMethod" asp-items="Html.GetEnumSelectList<AndMethod>()" id="AndMethod" class="form-control" style="width:200px;"></select>
    </div>
    <div class="col-sm-4">
        <label class="control-label">S-norma:&nbsp;&nbsp;</label>
        <select asp-for="OrMethod" asp-items="Html.GetEnumSelectList<OrMethod>()" id="OrMethod" class="form-control" style="width:200px;"></select>
    </div>
    </form>
</div>
<hr />
<div class="row">
    <div class="col-sm-6 inputs-values">
        <h4>Wejścia</h4>
        <form class="form-horizontal">
        @foreach (var input in Model.Inputs)
        {        
            <div class="form-group">
                <div class="col-sm-3">
                    <label class="control-label" data-name="@input.Name">@input.Name:</label>
                </div>
                <div class="col-sm-5" style="padding-top:7px;">
                    <input class="slider" data-slider-min="@input.RangeStart" 
                           data-slider-max="@input.RangeEnd" data-slider-step="0.01" data-slider-value="@input.RangeStart" />
                </div>
                <div class="col-sm-4">
                    <input type="text" class="form-control input-value" value="@input.RangeStart" data-min="@input.RangeStart" 
                           data-max="@input.RangeEnd" style="width:120px;" />
                </div>                 
            </div>
        }
        </form>
    </div>
    <div class="col-sm-6">
        <div class="">
        <h4>Wyjścia</h4>
        <form class="form-horizontal">
        @foreach (var output in Model.Outputs)
        {
            <div class="form-group">
                <div class="col-sm-4">
                    <label class="control-label">@output.Name:</label>
                </div>
                <div class="col-sm-8">
                    <input class="form-control" onkeydown="return false" tabindex="-1" id="Output-@output.OutputId" />
                </div>
            </div>

        }
        </form>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-sm-12">
        <h4>Log z obliczeń</h4>
        <textarea id="log" class="form-control" disabled rows="10" style="min-width:100%;"></textarea>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.5.3/css/bootstrap-slider.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-slider/9.5.3/bootstrap-slider.min.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        if ('@isPublished' == 'True') {
            $("select").prop("disabled", true);
        }
        $(".slider").bootstrapSlider();
    });

    $("#btnCalc").click(function () {
        var vm = collectCalcData();
        $.ajax({
            url: "@Url.Action("Calc")",
            type: "POST",
            data: JSON.stringify(vm),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                for (var key in response.calculatedValues) {
                    var outId = "Output-" + key;
                    $("#" + outId).val(response.calculatedValues[key]);
                }
                $("#log").val(response.infoLog);
            }
        });
        
    });

    $(".inputs-values").on("change", ".input-value", function () {
        var regex = /^\-?\d+([\.\,]\d+)?$/;
        var val = $(this).val();
        var isMatch = regex.test(val);
        if (!isMatch) {
            $(this).parents(".form-group").addClass("has-error");
            $("#btnCalc").prop("disabled", true);
        }
        else {
            $(this).parents(".form-group").removeClass("has-error");
            val = parseFloat(val.replace(',', '.'));
            var min = parseFloat($(this).data("min"));
            var max = parseFloat($(this).data("max"));
            if (val > max) {
                val = max;
            }
            if (val < min) {
                val = min;
            }
            $(this).val(val);
            var count = $(".has-error").length;
            if (count == 0) {
                $("#btnCalc").prop("disabled", false);
            }
            $(this).parents(".form-group").find(".slider").bootstrapSlider('setValue', val);
            //sliders[0].setValue(val);
        }
    });

    $(".slider").on("change", function () {
        $(this).parents(".form-group").find(".input-value").val($(this).val());
    });
</script>


