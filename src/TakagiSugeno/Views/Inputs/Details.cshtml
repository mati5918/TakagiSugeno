@model TakagiSugeno.Model.ViewModels.InputVM
@inject TakagiSugeno.Model.Services.SystemStateHelper StateHelper
@{
    ViewBag.Title = "Wejścia";
    string header = (ViewBag.IsNewInput != null)  ? "Nowa zmienna wejściowa" : "Szczegóły zmiennej wejściowej";
    bool isPublished = StateHelper.IsSystemPublished(ViewBag.SystemId);
}
<div class="content">
<div class="row">
    <div class="col-sm-8">
        <h2 class="header">
            @header
        </h2>
    </div>
    <div class="col-sm-4">
        <div class="pull-right">
            <button class="btn btn-primary" onclick="save()" id="btnSave" style="margin-top:20px;" disabled><span class="glyphicon glyphicon-save"></span> Zapisz</button>
            <button class="btn btn-danger" onclick="" id="btnCancel" style="margin-top:20px;" disabled data-toggle="modal" data-target="#cancelModal"><span class="glyphicon glyphicon-ban-circle"></span> Anuluj</button>
        </div>
        
    </div>
</div>
<div class="alert" id="alert-container" hidden>
    <span class="glyphicon glyphicon-remove hide-alert pull-right" onclick="hideAlert()"></span>
    <text id="alert-message"></text>
</div>
<div>
    <div class="row">
        <div class="col-sm-8">
            <form class="form-inline">
                <label asp-for="Name" class="control-label" style="width:80px;">Nazwa</label>
                <input asp-for="Name" class="form-control" id="InputName" />
                <input asp-for="InputId" class="form-control" id="InputId" type="hidden" />
                <input asp-for="SystemId" class="form-control" id="SystemId" type="hidden" />
            </form>
            <br />
            <form class="form-inline">
                <div class="form-group">
                    <label asp-for="RangeStart" class="control-label" style="width:80px;">Zakres od </label>
                    <input asp-for="RangeStart" class="form-control" id="RangeStart" style="width:85px;"/>
                </div>
                <div class="form-group">
                    <label asp-for="RangeEnd" class="control-label"> &nbsp;do&nbsp; </label>
                    <input asp-for="RangeEnd" class="form-control" id="RangeEnd" style="width:85px;" />
                </div>
            </form>
        </div>
        
    </div>
    <div class="row">
        <div class="col-sm-4"><h3>Wartości zmiennej</h3></div>
        <div class="col-sm-2">
            <button class="btn btn-success pull-right" style="margin-top:15px;" id="addVariable"><span class="glyphicon glyphicon-plus"></span> Dodaj</button>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-6 variables-list">
            @for (int i = 0; i < Model.Variables.Count; i++)
            {
                Html.RenderPartial("VariableRow", Model.Variables[i]);
            }
        </div>
        <div class="col-sm-6">
            <div id="chart-container"> </div>
        </div>
    </div>

   
    <div id="cancelModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Porzucenie zmian.</h4>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz porzucić zmiany dla tego wejścia?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="cancelChanges()" data-dismiss="modal">Tak</button>
                    <button type="button" class="btn btn-warning" data-dismiss="modal">Nie</button>
                </div>
            </div>

        </div>
    </div>
    <div id="removeInputModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Usunięcie wejścia.</h4>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usunąć wejście <span id="remove-input-name"></span>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-dismiss="modal" onclick="removeInput(this, true)">Tak</button>
                    <button type="button" class="btn btn-warning" data-dismiss="modal">Nie</button>
                </div>
            </div>

        </div>
    </div>
</div>
</div>
<div>
    <div id="cancelModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Porzucenie zmian.</h4>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz porzucić zmiany dla tego wejścia?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" onclick="cancelChanges()" data-dismiss="modal">Tak</button>
                    <button type="button" class="btn btn-warning" data-dismiss="modal">Nie</button>
                </div>
            </div>

        </div>
    </div>
    <div id="removeInputModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Usunięcie wejścia.</h4>
                </div>
                <div class="modal-body">
                    <p>Czy na pewno chcesz usunąć wejście <span id="remove-input-name"></span>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-dismiss="modal" onclick="removeInput(this, true)">Tak</button>
                    <button type="button" class="btn btn-warning" data-dismiss="modal">Nie</button>
                </div>
            </div>

        </div>
    </div>
</div>
<script type="text/javascript">
    //var isModfied = false;
    
    var id = $(".row #chart-container").attr("id");
    //var id = $("#test").attr("id");
    console.log(id);
    var chart = new CanvasJS.Chart(id, {
    //var chart = $("#chart-container").CanvasJSChart({
        axisX: {
            labelAngle: -25,
        },
        axisY: {
            minimum: 0,
            maximum: 1.05,
            //labelAngle: -30
        },
        height: 400,
        data: [],
    });
    $(document).ready(function () {
        chart.options.axisX.minimum = $("#RangeStart").val();
        chart.options.axisX.maximum = $("#RangeEnd").val();
        createCharts(chart);
        chart.render();
        if ('@isPublished' == 'True') {
            setReadOnly();
        }
        selectInput($("#InputId").val());
        var leftMargin = $(".navbar-fixed-top .container").css("margin-left").replace("px", "");
        var addPadding = leftMargin < 250
        if (addPadding) {
            $(".body-content").css("padding-left", 260 + "px");
            $(".body-content").css("margin-left", 0 + "px");

        }
    });



    $(".variables-list").on("click", ".variable-row", function () {
        var clickedId = $(this).attr("id");
        selectVariable(clickedId, chart);
    });

    $(".variables-list").on("focus", "input", function () {
        var clickedId = $(this).parents(".variable-row").attr("id");
        selectVariable(clickedId, chart);
    });

    $(".variables-list").on("mouseenter", ".variable-row", function () {
        var clickedId = $(this).attr("id");
        hoverVariable(clickedId, chart);
    });

    $(".variables-list").on("mouseleave", ".variable-row", function () {
        cancelHoverVariable(chart);
    });

    $("#addVariable").click(function () {
        var fakeId = createFakeId();
        var url = "/Inputs/AddVariable/?fakeId=" + parseInt(fakeId);
        $.ajax({
            url: url,
            type: "GET",
            success: function (response) {
                $(".variables-list").append(response);
                addNewSerieToChart(chart, fakeId);
                selectVariable(fakeId, chart);
                refreshButtonsState();
            }
        });
    });

    $(".variables-list").on("click", ".remove-variable", function () {
        var id = $(this).parents(".panel").attr("id");
        removeSerieFromChart(chart, id);
        $(this).closest("form").remove();
        refreshButtonsState();
        return false;

    });

    $(document).on("change", "select, input", function () {
        refreshButtonsState();
    });


    $(".variables-list").on("change", ".select-type", function () {
        var id = $(this).parents(".panel").attr("id");
        var url = "/Inputs/ChangeVariableType";
        var form = $(this).closest("form");
        var type = $(this).val();
        $.ajax({
            url: url,
            type: "GET",
            data: form.serialize(),
            success: function (response) {
                //$(form).reset();
                form.replaceWith(response);
                refreshSerie(id, chart, type);
                selectVariable(id, chart);

            }
        });

    });

    $(".variables-list").on("change", ".chart-data-input", function () {
        var regex = /^\-?\d+([\.\,]\d+)?$/;
        var val = $(this).val();
        var isMatch = regex.test(val);
        if (!isMatch) {
            $(this).parent(".form-group").addClass("has-error");
        }
        else {
            var type = $(this).parents(".variable-row").find(".select-type").val();
            console.log(type);
            $(this).parent(".form-group").removeClass("has-error");
            val = val.replace(',', '.');
            var id = $(this).parents(".panel").attr("id");
            var pos = $("#" + id + " .chart-data-input").index($(this));
            val = parseFloat(val);
            for (var i in chart.options.data) {
                var data = chart.options.data[i];
                if (data.name == id) {
                    var functionData = [];
                    $(this).parents(".variable-row").find(".chart-data-input").each(function (i, v) {
                        functionData.push($(v).val().replace(',', '.'));
                    });
                    switch (parseInt(type)) {
                        case 0: data.dataPoints = getTriangleDataPoints(functionData, chart); break;
                        case 1: data.dataPoints = getTrapezeDataPoints(functionData, chart); break;
                        case 2: data.dataPoints = getGaussianDataPoints(functionData, chart); break;
                    }
                }
            }
            chart.render();
        }
    });

    function save() {
        var inputVM = collectData();
        inputVM.InputId = $("#InputId").val();
        inputVM.RangeStart = $("#RangeStart").val();
        inputVM.RangeEnd = $("#RangeEnd").val();
        $.ajax({
            url: "@Url.Action("Save")",
            type: "POST",
            data: JSON.stringify(inputVM),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                if (response.errors.length == 0) {
                    refreshSystemMenu();
                    printSaveSuccess();
                    $("#btnCancel, #btnSave").prop("disabled", true);
                    $(".header").text("Szczegóły zmiennej wejściowej");
                    getInputsList($("#SysId").attr("data-system-id"), response.id);
                    $("#InputId").val(response.id);
                    //selectInput(response.id);
                    console.log(response.id);
                }
                else {
                    printSaveErrors(response);
                }
                $("#alert-container").show();
            }
        });
    }

    $("#RangeStart").change(function () {
        var regex = /^\-?\d+([\.\,]\d+)?$/;
        var val = $(this).val();      
        var isMatch = regex.test(val);
        if (!isMatch) {
            $(this).parent(".form-group").addClass("has-error");
        }
        else {
            $(this).parent(".form-group").removeClass("has-error");
            val = val.replace(',', '.');
            var end = $("#RangeEnd").val();
            if (val >= end) {
                end = parseFloat(val) + 5;
                $("#RangeEnd").val(end);
                chart.options.axisX.maximum = end;
            }
            chart.options.axisX.minimum = val;
            clearChart(chart);
            createCharts(chart);
            chart.render();
        }
    });

    $("#RangeEnd").change(function () {
        var regex = /^\-?\d+([\.\,]\d+)?$/;
        var val = $(this).val();
        var isMatch = regex.test(val);
        if (!isMatch) {
            $(this).parent(".form-group").addClass("has-error");
        }
        else {
            $(this).parent(".form-group").removeClass("has-error");
            val = val.replace(',', '.');
            var start = $("#RangeStart").val();
            if (val <= start) {
                start = parseFloat(val) - 5;
                $("#RangeStart").val(start);
                chart.options.axisX.minimum = start;
            }
            chart.options.axisX.maximum = parseFloat(val);
            clearChart(chart);
            createCharts(chart);
            chart.render();
        }
    });

    function cancelChanges() {
        setTimeout(function () {
            var id = $("#InputId").val();
            if (id != -1) {
                openInput(id, '@ViewBag.Title');
            } else {
                addInput();
            }
        }, 200)

    }
</script>
